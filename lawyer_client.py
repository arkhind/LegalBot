#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç —é—Ä–∏—Å—Ç–∞ @narhipovd
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ –≤–µ–¥–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
"""

import os
import asyncio
import json
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import psycopg2
from psycopg2.extras import RealDictCursor
from loguru import logger

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class LawyerClient:
    def __init__(self):
        self.bot_token = os.getenv("LAWYER_BOT_TOKEN")  # –¢–æ–∫–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ @narhipovd
        self.database_url = os.getenv("DATABASE_URL")
        self.session_file = "lawyer_session.json"
        self.connection = None
        self.connect_database()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        self.session_data = self.load_session()
        
    def connect_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = psycopg2.connect(self.database_url)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.connection = None
    
    def load_session(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            if os.path.exists(self.session_file):
                with open(self.session_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return {}
    
    def save_session(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            with open(self.session_file, 'w', encoding='utf-8') as f:
                json.dump(self.session_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
    
    def check_payment(self, user_id: int) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –∏–ª–∏ None
        """
        if not self.connection:
            return None
        
        try:
            cursor = self.connection.cursor(cursor_factory=RealDictCursor)
            cursor.execute("""
                SELECT * FROM consultations 
                WHERE user_id = %s 
                ORDER BY created_at DESC 
                LIMIT 1
            """, (user_id,))
            
            result = cursor.fetchone()
            cursor.close()
            
            if result:
                return dict(result)
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {user_id}: {e}")
            return None
    
    def get_user_info(self, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        if not self.connection:
            return None
        
        try:
            cursor = self.connection.cursor(cursor_factory=RealDictCursor)
            cursor.execute("""
                SELECT * FROM users 
                WHERE telegram_id = %s
            """, (user_id,))
            
            result = cursor.fetchone()
            cursor.close()
            
            if result:
                return dict(result)
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            return None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")
        
        await update.message.reply_text(
            "üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à ID –∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Æ–†–ò–°–¢2024.\n"
            "–ü—Ä–∏–º–µ—Ä: 123456789 –Æ–†–ò–°–¢2024"
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} (@{user.username}): {message_text[:100]}...")
        
        # –ò—â–µ–º Telegram ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ)
        import re
        id_match = re.search(r'(\d{8,})', message_text)
        code_match = re.search(r'–Æ–†–ò–°–¢2024', message_text, re.IGNORECASE)
        
        if not id_match:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Telegram ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            return
        
        client_id = int(id_match.group(1))
        
        if not code_match:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Æ–†–ò–°–¢2024.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ü—Ä–∏–º–µ—Ä: –ú–æ–π ID 123456789, –∫–æ–¥ –Æ–†–ò–°–¢2024, –≤–æ–ø—Ä–æ—Å: –∫–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –¥–æ–≥–æ–≤–æ—Ä?"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
        payment_info = self.check_payment(client_id)
        
        if not payment_info:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n\n"
                "–û–ø–ª–∞—Ç–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = self.get_user_info(client_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        response = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        response += f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        response += f"–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        

        
        await update.message.reply_text(response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ —Å–µ—Å—Å–∏–∏
        self.session_data[str(client_id)] = {
            "user_info": user_info,
            "payment_info": payment_info,
            "last_contact": datetime.now().isoformat()
        }
        self.save_session()
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
            "–ö–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç: ID + –Æ–†–ò–°–¢2024\n"
            "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É\n"
            "–ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ - –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n"
            "–ü—Ä–∏–º–µ—Ä: 123456789 –Æ–†–ò–°–¢2024"
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        if not self.session_data:
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞ - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            return
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
        
        for client_id, data in self.session_data.items():
            user_info = data.get("user_info", {})
            payment_info = data.get("payment_info", {})
            last_contact = data.get("last_contact", "")
            
            stats_text += f"üë§ {user_info.get('first_name', '')} {user_info.get('last_name', '')}\n"
            stats_text += f"üÜî ID: {client_id}\n"
            stats_text += f"üí∞ –û–ø–ª–∞—Ç–∞: {payment_info.get('amount', 0)}‚ÇΩ\n"
            stats_text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {last_contact[:10]}\n\n"
        
        await update.message.reply_text(stats_text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.bot_token:
            logger.error("‚ùå LAWYER_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("ü§ñ –ë–æ—Ç —é—Ä–∏—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

if __name__ == "__main__":
    lawyer_client = LawyerClient()
    lawyer_client.run()
