#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import os
import psycopg2
import time
from dotenv import load_dotenv
from loguru import logger

def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_url = os.getenv('DATABASE_URL')
    pghost = os.getenv('PGHOST')
    pgdatabase = os.getenv('PGDATABASE')
    pguser = os.getenv('PGUSER')
    pgpassword = os.getenv('PGPASSWORD')
    
    print(f"üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"   DATABASE_URL: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if database_url else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"   PGHOST: {pghost or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"   PGDATABASE: {pgdatabase or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"   PGUSER: {pguser or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"   PGPASSWORD: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if pgpassword else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connection = None
    try:
        if database_url:
            print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DATABASE_URL...")
            connection = psycopg2.connect(
                database_url,
                keepalives_idle=30,
                keepalives_interval=10,
                keepalives_count=5,
                connect_timeout=10
            )
        else:
            print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...")
            connection = psycopg2.connect(
                host=pghost,
                database=pgdatabase,
                user=pguser,
                password=pgpassword,
                sslmode=os.getenv('PGSSLMODE'),
                channel_binding=os.getenv('PGCHANNELBINDING'),
                keepalives_idle=30,
                keepalives_interval=10,
                keepalives_count=5,
                connect_timeout=10
            )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        cursor = connection.cursor()
        cursor.execute("SELECT version()")
        version = cursor.fetchone()
        print(f"üìä –í–µ—Ä—Å–∏—è PostgreSQL: {version[0]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        cursor.execute("""
            SELECT count(*) as active_connections 
            FROM pg_stat_activity 
            WHERE state = 'active'
        """)
        active_connections = cursor.fetchone()[0]
        print(f"üîó –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {active_connections}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        cursor.execute("SHOW max_connections")
        max_connections = cursor.fetchone()[0]
        print(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {max_connections}")
        
        cursor.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    finally:
        if connection:
            connection.close()

def test_retry_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç retry –ª–æ–≥–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ retry –ª–æ–≥–∏–∫–∏...")
    
    load_dotenv()
    
    database_url = os.getenv('DATABASE_URL')
    pghost = os.getenv('PGHOST')
    pgdatabase = os.getenv('PGDATABASE')
    pguser = os.getenv('PGUSER')
    pgpassword = os.getenv('PGPASSWORD')
    
    max_retries = 3
    retry_delay = 2
    
    for attempt in range(max_retries):
        try:
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}...")
            
            if database_url:
                connection = psycopg2.connect(
                    database_url,
                    keepalives_idle=30,
                    keepalives_interval=10,
                    keepalives_count=5,
                    connect_timeout=10
                )
            else:
                connection = psycopg2.connect(
                    host=pghost,
                    database=pgdatabase,
                    user=pguser,
                    password=pgpassword,
                    sslmode=os.getenv('PGSSLMODE'),
                    channel_binding=os.getenv('PGCHANNELBINDING'),
                    keepalives_idle=30,
                    keepalives_interval=10,
                    keepalives_count=5,
                    connect_timeout=10
                )
            
            print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            connection.close()
            return True
            
        except Exception as e:
            print(f"   ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < max_retries - 1:
                print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)
            else:
                print("   üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                return False

def check_postgresql_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å PostgreSQL"""
    print("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL...")
    
    try:
        import subprocess
        result = subprocess.run(['systemctl', 'status', 'postgresql'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
            return True
        else:
            print("‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo systemctl start postgresql")
            return False
            
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å PostgreSQL: {e}")
        return False

def check_network_connectivity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    load_dotenv()
    
    database_url = os.getenv('DATABASE_URL')
    pghost = os.getenv('PGHOST', 'localhost')
    
    if database_url:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç –∏–∑ DATABASE_URL
        if '://' in database_url:
            host = database_url.split('://')[1].split('/')[0].split('@')[-1].split(':')[0]
        else:
            host = 'localhost'
    else:
        host = pghost
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}...")
    
    try:
        import subprocess
        result = subprocess.run(['ping', '-c', '3', host], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ –•–æ—Å—Ç {host} –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå –•–æ—Å—Ç {host} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PostgreSQL
    postgresql_ok = check_postgresql_status()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    network_ok = check_network_connectivity()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connection_ok = test_connection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º retry –ª–æ–≥–∏–∫—É
    retry_ok = test_retry_connection()
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print(f"   PostgreSQL: {'‚úÖ' if postgresql_ok else '‚ùå'}")
    print(f"   –°–µ—Ç—å: {'‚úÖ' if network_ok else '‚ùå'}")
    print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if connection_ok else '‚ùå'}")
    print(f"   Retry –ª–æ–≥–∏–∫–∞: {'‚úÖ' if retry_ok else '‚ùå'}")
    
    if not postgresql_ok:
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   sudo systemctl start postgresql")
        print("   sudo systemctl enable postgresql")
    
    if not connection_ok:
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL")
    
    if connection_ok and not retry_ok:
        print("\n‚ö†Ô∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ retry –ª–æ–≥–∏–∫–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

if __name__ == "__main__":
    main()
