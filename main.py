import os
import asyncio
import signal
import json
import requests
import re
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from loguru import logger
from payment_handler import PaymentHandler
from database import Database
import psycopg2.extras

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from telethon import TelegramClient, events
    from telethon.sessions import StringSession
    TELETHON_AVAILABLE = True
except ImportError:
    TELETHON_AVAILABLE = False
    logger.warning("Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ö–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞.")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("bot.log", rotation="1 day", retention="7 days")


class TelegramSessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞"""
    
    def __init__(self):
        self.api_id = os.getenv("TELEGRAM_API_ID")
        self.api_hash = os.getenv("TELEGRAM_API_HASH")
        self.phone = os.getenv("TELEGRAM_PHONE")
        self.session_file = "veretenov_session.txt"
        
    async def ensure_session(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
        if not all([self.api_id, self.api_hash, self.phone]):
            logger.warning("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è Telegram —Å–µ—Å—Å–∏–∏")
            logger.warning("–ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        if await self.test_existing_session():
            logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        logger.info("üîê –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ Telegram...")
        return await self.create_new_session()
    
    async def test_existing_session(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é"""
        session_string = self.load_session()
        if not session_string:
            return False
        
        try:
            client = TelegramClient(
                StringSession(session_string), 
                int(self.api_id), 
                self.api_hash
            )
            
            await client.connect()
            
            if await client.is_user_authorized():
                me = await client.get_me()
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è: {me.first_name} (@{me.username})")
                await client.disconnect()
                return True
            else:
                logger.warning("‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    async def create_new_session(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = TelegramClient(
                StringSession(), 
                int(self.api_id), 
                self.api_hash
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –º—ã
            if not await client.is_user_authorized():
                logger.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                await client.send_code_request(self.phone)
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print("\n" + "="*50)
                print("üîê –¢–†–ï–ë–£–ï–¢–°–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –í TELEGRAM")
                print("="*50)
                print(f"üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä: {self.phone}")
                print("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:")
                code = input("–ö–æ–¥: ").strip()
                
                try:
                    # –í—Ö–æ–¥–∏–º —Å –∫–æ–¥–æ–º
                    await client.sign_in(self.phone, code)
                    logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –æ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if "2FA" in str(e) or "password" in str(e).lower():
                        print("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –æ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                        password = input("–ü–∞—Ä–æ–ª—å: ").strip()
                        await client.sign_in(password=password)
                        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞!")
                    else:
                        raise e
            else:
                logger.info("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
            me = await client.get_me()
            logger.info(f"üë§ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {me.first_name} (@{me.username})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            session_string = client.session.save()
            with open(self.session_file, 'w') as f:
                f.write(session_string)
            
            logger.info(f"üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.session_file}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
            await client.disconnect()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    def load_session(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
        try:
            if os.path.exists(self.session_file):
                with open(self.session_file, 'r') as f:
                    return f.read().strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return None


class LegalBot:
    def __init__(self):
        self.bot_token = os.getenv("BOT_TOKEN")
        self.openrouter_api_key = os.getenv("OPENROUTER_API_KEY")
        
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenRouter –¥–ª—è Gemini
        if self.openrouter_api_key:
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenRouter API –¥–ª—è Gemini...")
            self.openrouter_url = "https://openrouter.ai/api/v1/chat/completions"
            self.openrouter_headers = {
                "Authorization": f"Bearer {self.openrouter_api_key}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com/your-repo/legal-bot",
                "X-Title": "Legal AI Bot"
            }
            logger.info("OpenRouter API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —é—Ä–∏—Å—Ç–æ–≤
        lawyer_id_str = os.getenv("LAWYER_TELEGRAM_ID", "0")
        try:
            lawyer_id = int(lawyer_id_str) if lawyer_id_str.isdigit() else 0
        except (ValueError, AttributeError):
            lawyer_id = 0
            
        self.allowed_lawyers = [
            lawyer_id,  # ID —é—Ä–∏—Å—Ç–∞ –∏–∑ .env
            89895202224  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —é—Ä–∏—Å—Ç–∞
        ]
        
        self.application = Application.builder().token(self.bot_token).build()
        self.payment_handler = PaymentHandler()
        self.database = Database()
        self._load_texts()
        self._setup_handlers()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞
        self.lawyer_client_enabled = os.getenv("LAWYER_CLIENT_ENABLED", "false").lower() == "true"
        self.lawyer_client = None
        self.lawyer_session_file = "veretenov_session.txt"
        self.lawyer_data_file = "lawyer_data.json"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
        self.session_manager = TelegramSessionManager()
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ email
        self.email_waiting_users = {}
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_emails = {}
        
        if self.lawyer_client_enabled:
            self._init_lawyer_client()
    
    def _load_texts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã
            with open('texts/welcome.txt', 'r', encoding='utf-8') as f:
                self.welcome_text = f.read().strip()
            logger.debug("welcome.txt –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            with open('texts/ai_consultation.txt', 'r', encoding='utf-8') as f:
                self.ai_consultation_text = f.read().strip()
            logger.debug("ai_consultation.txt –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            with open('texts/real_lawyer.txt', 'r', encoding='utf-8') as f:
                self.real_lawyer_text = f.read().strip()
            logger.debug("real_lawyer.txt –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            with open('texts/about.txt', 'r', encoding='utf-8') as f:
                self.about_text = f.read().strip()
            logger.debug("about.txt –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            with open('texts/error_messages.txt', 'r', encoding='utf-8') as f:
                error_lines = f.read().strip().split('\n\n')
                self.error_messages = {
                    'no_openai': error_lines[0],
                    'processing_error': error_lines[1],
                    'general_error': error_lines[2]
                }
            logger.debug("error_messages.txt –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
            with open('prompts/legal_ai_prompt.txt', 'r', encoding='utf-8') as f:
                self.legal_ai_prompt = f.read().strip()
            logger.debug("legal_ai_prompt.txt –∑–∞–≥—Ä—É–∂–µ–Ω")
            

                
            logger.info("–í—Å–µ —Ç–µ–∫—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤: {e}")
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–µ–∫—Å—Ç—ã")
            # Fallback —Ç–µ–∫—Å—Ç—ã
            self.welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ë–æ—Ç!"
            self.ai_consultation_text = "–ò–ò –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            self.real_lawyer_text = "–°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º"
            self.about_text = "–û –Ω–∞—Å"
            self.legal_ai_prompt = "–¢—ã - —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç."

            self.error_messages = {
                'no_openai': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —é—Ä–∏—Å—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º'.",
                'processing_error': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —é—Ä–∏—Å—Ç–æ–º.",
                'general_error': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
            }
            logger.info("Fallback —Ç–µ–∫—Å—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ÆKassa)
        # –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram Payments
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —é—Ä–∏—Å—Ç–æ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤)
        self.application.add_handler(CommandHandler("check", self.check_code_word_command))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def _init_lawyer_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞"""
        if not TELETHON_AVAILABLE:
            logger.warning("Telethon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω")
            return
        
        try:
            api_id = os.getenv("TELEGRAM_API_ID")
            api_hash = os.getenv("TELEGRAM_API_HASH")
            
            if not api_id or not api_hash:
                logger.warning("TELEGRAM_API_ID –∏–ª–∏ TELEGRAM_API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return
            
            self.lawyer_api_id = int(api_id)
            self.lawyer_api_hash = api_hash
            self.lawyer_data = self._load_lawyer_data()
            
            logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞: {e}")
    
    def _load_lawyer_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞"""
        try:
            if os.path.exists(self.lawyer_data_file):
                with open(self.lawyer_data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ JSON –≤ —Ñ–∞–π–ª–µ {self.lawyer_data_file}: {e}")
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            backup_file = f"{self.lawyer_data_file}.backup"
            try:
                import shutil
                shutil.copy2(self.lawyer_data_file, backup_file)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
            except Exception as backup_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {backup_error}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —é—Ä–∏—Å—Ç–∞: {e}")
        return {"clients": {}, "settings": {}}
    
    def _save_lawyer_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞"""
        try:
            with open(self.lawyer_data_file, 'w', encoding='utf-8') as f:
                json.dump(self.lawyer_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —é—Ä–∏—Å—Ç–∞: {e}")
    
    def _load_lawyer_session(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ —é—Ä–∏—Å—Ç–∞"""
        return self.session_manager.load_session()
    
    def _check_lawyer_payment(self, user_id: int) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è —é—Ä–∏—Å—Ç–∞"""
        if not self.database.connection:
            return None
        
        try:
            cursor = self.database.connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT * FROM consultations 
                WHERE user_id = %s 
                ORDER BY created_at DESC 
                LIMIT 1
            """, (user_id,))
            
            result = cursor.fetchone()
            cursor.close()
            
            if result:
                return dict(result)
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {user_id}: {e}")
            return None
    
    def _get_lawyer_user_info(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —é—Ä–∏—Å—Ç–∞"""
        if not self.database.connection:
            return None
        
        try:
            cursor = self.database.connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT * FROM users 
                WHERE telegram_id = %s
            """, (user_id,))
            
            result = cursor.fetchone()
            cursor.close()
            
            if result:
                return dict(result)
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            return None
    
    async def check_code_word_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —é—Ä–∏—Å—Ç–æ–º"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç —é—Ä–∏—Å—Ç–∞
        if user_id not in self.allowed_lawyers:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if len(args) < 2:
            await update.message.reply_text(
                "üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
                "/check <telegram_id> <–∫–æ–¥–æ–≤–æ–µ_—Å–ª–æ–≤–æ>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/check 123456789 –Æ–†–ò–°–¢2024\n\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º."
            )
            return
        
        try:
            client_telegram_id = int(args[0])
            code_word = args[1]
            
            await self.verify_code_word_for_lawyer(update, client_telegram_id, code_word)
            
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.")
    
    async def verify_code_word_for_lawyer(self, update: Update, client_telegram_id: int, code_word: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —é—Ä–∏—Å—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            is_valid = self.database.verify_code_word(client_telegram_id, code_word)
            
            if is_valid:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                consultation = self.database.get_consultation_by_code_word(client_telegram_id, code_word)
                
                if consultation:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ
                    message = f"‚úÖ –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –í–ï–†–ù–û–ï!\n\n"
                    message += f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:\n"
                    message += f"üë§ –ò–º—è: {consultation.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} {consultation.get('last_name', '')}\n"
                    message += f"üì± Username: @{consultation.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    message += f"üÜî Telegram ID: {consultation['user_id']}\n"
                    message += f"üí∞ –°—É–º–º–∞: {consultation['amount']}‚ÇΩ\n"
                    message += f"üìã –¢–∏–ø: {consultation['consultation_type']}\n"
                    message += f"üìÖ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {consultation['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                    message += f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {consultation['payment_id']}\n\n"
                    message += f"‚úÖ –ú–æ–∂–Ω–æ –æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
                    
                    await update.message.reply_text(message)
                    
                    logger.info(f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_telegram_id}")
                else:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤–µ—Ä–Ω–æ–µ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    )
            else:
                await update.message.reply_text(
                    "‚ùå –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –ù–ï–í–ï–†–ù–û–ï!\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ\n"
                    "‚Ä¢ –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª —Å–æ–≤–µ—Ä—à–µ–Ω\n"
                    "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Telegram ID\n"
                    "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞\n\n"
                    "‚ö†Ô∏è –ù–µ –æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"
                )
                
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_telegram_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def notify_lawyer(self, user_id: int, amount: float, consultation_name: str, consultation_type: str):
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç —é—Ä–∏—Å—Ç–∞ –æ –Ω–æ–≤–æ–π –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        """
        try:
            lawyer_chat_id = os.getenv("LAWYER_CHAT_ID")
            
            if not lawyer_chat_id:
                logger.warning("LAWYER_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = self.database.get_user_info(user_id)
            
            message = f"üí∞ –ù–û–í–ê–Ø –û–ü–õ–ê–ß–ï–ù–ù–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø!\n\n"
            message += f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_info.get('first_name', '')} {user_info.get('last_name', '')}\n"
            message += f"üì± Username: @{user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"üÜî Telegram ID: {user_id}\n"
            message += f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n"
            message += f"üìã –¢–∏–ø: {consultation_name}\n"
            message += f"üîê –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: –Æ–†–ò–°–¢2024\n\n"
            message += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n"
            message += f"üë§ Telegram: @narhipovd\n\n"
            message += f"üí° –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º"
            
            await self.application.bot.send_message(
                chat_id=lawyer_chat_id,
                text=message
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é—Ä–∏—Å—Ç—É –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —é—Ä–∏—Å—Ç—É: {e}")
    
    def get_legal_advice_from_gemini(self, user_message):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ OpenRouter API —Å Gemini 2.0 Flash Lite
        """
        if not self.openrouter_api_key:
            logger.warning("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            system_prompt = self.legal_ai_prompt
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            formatting_instruction = "\n\n–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–∑–º–µ—Ç–∫–∏, —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            prompt = f"{system_prompt}{formatting_instruction}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}"
            
            data = {
                "model": "google/gemini-2.0-flash-lite-001",
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": 0.3,
                "max_tokens": 1500
            }
            
            response = requests.post(
                self.openrouter_url, 
                headers=self.openrouter_headers, 
                json=data, 
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content'].strip()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ OpenRouter API: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenRouter: {e}")
            return None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            self.database.add_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        keyboard = [
            [InlineKeyboardButton("ü§ñ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="ai_consultation")],
            [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º", callback_data="real_lawyer")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await update.message.reply_text(
                self.welcome_text,
                reply_markup=reply_markup
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ start_command: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            try:
                await update.message.reply_text(
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ë–æ—Ç!",
                    reply_markup=reply_markup
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ (fallback)")
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        try:
            await query.answer()
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ query.message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not query.message:
                logger.error(f"query.message is None –¥–ª—è –∫–Ω–æ–ø–∫–∏ {query.data}")
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await context.bot.send_message(
                        chat_id=query.from_user.id,
                        text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start"
                    )
                except Exception as send_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
                return
            
            if query.data == "ai_consultation":
                await self.handle_ai_consultation(query)
            elif query.data == "real_lawyer":
                await self.handle_real_lawyer(query)
            elif query.data == "pay_oral_consultation":
                await self.handle_payment(query, "oral")
            elif query.data == "pay_full_consultation":
                await self.handle_payment(query, "full")
            elif query.data.startswith("check_payment_"):
                payment_id = query.data.replace("check_payment_", "")
                await self.handle_check_payment(query, payment_id)
            elif query.data.startswith("enter_email_"):
                consultation_type = query.data.replace("enter_email_", "")
                await self.handle_enter_email(query, consultation_type)
            elif query.data.startswith("no_receipt_"):
                consultation_type = query.data.replace("no_receipt_", "")
                await self.handle_no_receipt(query, consultation_type)
            
            elif query.data == "about":
                await self.handle_about(query)

            elif query.data == "main_menu":
                await self.handle_main_menu(query)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
            try:
                await query.answer(self.error_messages['general_error'])
            except:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    
    async def handle_ai_consultation(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        user_id = query.from_user.id
        
        keyboard = [
            [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º", callback_data="real_lawyer")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "ü§ñ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º —Å –æ—Ç–≤–µ—Ç–æ–º.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            "‚Ä¢ –ö–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –¥–æ–≥–æ–≤–æ—Ä?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ò–ü?\n"
            "‚Ä¢ –ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–∞–≤–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞?\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "üí° –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!"
        )
        
        try:
            if query.message:
                await query.message.reply_text(
                    message,
                    reply_markup=reply_markup
                )
            else:
                await query.get_bot().send_message(
                    chat_id=user_id,
                    text=message,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_ai_consultation: {e}")
            return
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–±–µ–∑–ª–∏–º–∏—Ç)")
    
    async def handle_real_lawyer(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤—è–∑–∏ —Å —é—Ä–∏—Å—Ç–æ–º"""
        reply_markup = self.payment_handler.create_consultation_keyboard()
        message_text = self.payment_handler.get_consultation_message()
        
        try:
            if query.message:
                await query.message.reply_text(
                    message_text,
                    reply_markup=reply_markup
                )
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                await query.get_bot().send_message(
                    chat_id=query.from_user.id,
                    text=message_text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_real_lawyer: {e}")
            return
            
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –≤—ã–±—Ä–∞–ª —Å–≤—è–∑—å —Å —é—Ä–∏—Å—Ç–æ–º")
    

    
    async def handle_payment(self, query, consultation_type="oral"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ÆKassa"""
        user_id = query.from_user.id
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª {consultation_type} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email –¥–ª—è —á–µ–∫–∞
        await self.request_email_for_receipt(query, consultation_type)
    
    async def request_email_for_receipt(self, query, consultation_type="oral"):
        """–ó–∞–ø—Ä–æ—Å email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞"""
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ email
        keyboard = [
            [InlineKeyboardButton("üìß –í–≤–µ—Å—Ç–∏ email", callback_data=f"enter_email_{consultation_type}")],
            [InlineKeyboardButton("üö´ –ë–µ–∑ —á–µ–∫–∞", callback_data=f"no_receipt_{consultation_type}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            f"üßæ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞ –Ω—É–∂–µ–Ω –≤–∞—à email\n\n"
            f"üìß –ß–µ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email\n"
            f"üí° –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∂–µ—Ç–µ email, —á–µ–∫ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if query.message:
            await query.message.reply_text(message_text, reply_markup=reply_markup)
        else:
            await query.get_bot().send_message(
                chat_id=query.from_user.id,
                text=message_text,
                reply_markup=reply_markup
            )
    
    async def handle_enter_email(self, query, consultation_type="oral"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
        user_id = query.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email
        self.email_waiting_users[user_id] = consultation_type
        
        message_text = (
            f"üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:\n\n"
            f"üí° –ü—Ä–∏–º–µ—Ä: example@mail.ru\n"
            f"‚ö†Ô∏è Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ email —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
        )
        
        keyboard = [
            [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query.message:
            await query.message.reply_text(message_text, reply_markup=reply_markup)
        else:
            await query.get_bot().send_message(
                chat_id=query.from_user.id,
                text=message_text,
                reply_markup=reply_markup
            )
    
    async def handle_no_receipt(self, query, consultation_type="oral"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —á–µ–∫–∞"""
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –±–µ–∑ —á–µ–∫–∞
        payment_info = self.payment_handler.create_payment(consultation_type, user_id, None)
        
        if payment_info["success"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ email)
            self.database.add_consultation(
                user_id=user_id,
                consultation_type=consultation_type,
                amount=payment_info["amount"],
                payment_id=payment_info["payment_id"],
                code_word="–Æ–†–ò–°–¢2024",
                email=None
            )
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_info["confirmation_url"])],
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_info['payment_id']}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message_text = (
                    f"üí≥ –û–ø–ª–∞—Ç–∞ {payment_info['title']}\n\n"
                    f"üí∞ –°—É–º–º–∞: {payment_info['amount']}‚ÇΩ\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {payment_info['description']}\n\n"
                    f"‚ö†Ô∏è –ß–µ–∫ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω\n\n"
                    f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
                )
                
                if query.message:
                    await query.message.reply_text(message_text, reply_markup=reply_markup)
                else:
                    await query.get_bot().send_message(
                        chat_id=query.from_user.id,
                        text=message_text,
                        reply_markup=reply_markup
                    )
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª –ø–ª–∞—Ç–µ–∂ {payment_info['payment_id']} –¥–ª—è {consultation_type} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–±–µ–∑ —á–µ–∫–∞)")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
                error_message = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                try:
                    if query.message:
                        await query.message.reply_text(error_message)
                    else:
                        await query.get_bot().send_message(
                            chat_id=query.from_user.id,
                            text=error_message
                        )
                except Exception as send_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            try:
                if query.message:
                    await query.message.reply_text(error_message)
                else:
                    await query.get_bot().send_message(
                        chat_id=query.from_user.id,
                        text=error_message
                    )
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payment_info.get('error')}")
        
        if payment_info["success"]:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_info["confirmation_url"])],
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_info['payment_id']}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message_text = (
                    f"üí≥ –û–ø–ª–∞—Ç–∞ {payment_info['title']}\n\n"
                    f"üí∞ –°—É–º–º–∞: {payment_info['amount']}‚ÇΩ\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {payment_info['description']}\n\n"
                    f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
                )
                
                if query.message:
                    await query.message.reply_text(message_text, reply_markup=reply_markup)
                else:
                    await query.get_bot().send_message(
                        chat_id=query.from_user.id,
                        text=message_text,
                        reply_markup=reply_markup
                    )
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª –ø–ª–∞—Ç–µ–∂ {payment_info['payment_id']} –¥–ª—è {consultation_type} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
                error_message = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                try:
                    if query.message:
                        await query.message.reply_text(error_message)
                    else:
                        await query.get_bot().send_message(
                            chat_id=query.from_user.id,
                            text=error_message
                        )
                except Exception as send_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            try:
                if query.message:
                    await query.message.reply_text(error_message)
                else:
                    await query.get_bot().send_message(
                        chat_id=query.from_user.id,
                        text=error_message
                    )
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payment_info.get('error')}")
    
    async def handle_check_payment(self, query, payment_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        user_id = query.from_user.id
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        
        payment_status = self.payment_handler.check_payment_status(payment_id)
        
        if payment_status["success"]:
            if payment_status["status"] == "succeeded":
                # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
                amount = payment_status["amount"]
                consultation_type = payment_status["metadata"].get("consultation_type", "oral")
                
                # –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                user_email = self.database.get_consultation_email(payment_id)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                consultation_name = "–£—Å—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if consultation_type == "oral" else "–ü–æ–ª–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∏–∑—É—á–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                await query.message.reply_text(
                    f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n\n"
                    f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n"
                    f"üìã –¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {consultation_name}\n"
                    f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ù–∞—à —é—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n"
                    f"üë§ Telegram: @narhipovd",
                    reply_markup=reply_markup
                )
                
                # –°–æ–∑–¥–∞–µ–º —á–µ–∫ —á–µ—Ä–µ–∑ –ÆKassa
                try:
                    # –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    user_email = self.database.get_consultation_email(payment_id)
                    receipt_result = self.payment_handler.create_receipt(payment_id, user_email)
                    if receipt_result["success"]:
                        await query.message.reply_text(
                            f"üßæ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                            f"‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–µ–∫ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                            f"üìß –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email\n"
                            f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
                            f"üí° –ï—Å–ª–∏ —á–µ–∫ –Ω–µ –ø—Ä–∏—à–µ–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É '–°–ø–∞–º'"
                        )
                        logger.info(f"–ß–µ–∫ –ÆKassa –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {receipt_result.get('receipt_id')}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞ –ÆKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {receipt_result.get('error')}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        await query.message.reply_text(
                            f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —á–µ–∫–æ–º\n\n"
                            f"üìã –£—Å–ª—É–≥–∞: {consultation_name}\n"
                            f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n"
                            f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
                            f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @narhipovd"
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –ÆKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    await query.message.reply_text(
                        f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —á–µ–∫–æ–º\n\n"
                        f"üìã –£—Å–ª—É–≥–∞: {consultation_name}\n"
                        f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n"
                        f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
                        f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @narhipovd"
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await query.message.reply_text(
                    f"üîê –ö–û–î–û–í–û–ï –°–õ–û–í–û –î–õ–Ø –Æ–†–ò–°–¢–ê\n\n"
                    f"üìù –Æ–†–ò–°–¢2024\n\n"
                    f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —é—Ä–∏—Å—Ç—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–æ–≤–∏—Ç–µ —ç—Ç–æ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n\n"
                    f"üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
                    f"1. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —é—Ä–∏—Å—Ç–æ–º –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º\n"
                    f"2. –ù–∞–∑–æ–≤–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: –Æ–†–ò–°–¢2024\n"
                    f"3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID: {user_id}\n"
                    f"4. –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n\n"
                    f"üîí –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
                )
                
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {amount}‚ÇΩ –∑–∞ {consultation_type} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —é—Ä–∏—Å—Ç–∞ –æ –Ω–æ–≤–æ–π –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                await self.notify_lawyer(user_id, amount, consultation_name, consultation_type)
                
            elif payment_status["status"] == "pending":
                # –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.message.reply_text(
                    f"‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                    reply_markup=reply_markup
                )
                
            else:
                # –ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="real_lawyer")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.message.reply_text(
                    f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–ø–ª–∞—á–µ–Ω\n\n"
                    f"–°—Ç–∞—Ç—É—Å: {payment_status['status']}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
                    reply_markup=reply_markup
                )
        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞\n\n"
                f"–û—à–∏–±–∫–∞: {payment_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –µ—â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )
    
    # –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram Payments
    # async def pre_checkout_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    # async def successful_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    

    
    async def handle_about(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'"""
        keyboard = [
            [InlineKeyboardButton("ü§ñ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="ai_consultation")],
            [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º", callback_data="real_lawyer")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            if query.message:
                await query.message.reply_text(
                    self.about_text,
                    reply_markup=reply_markup
                )
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                await query.get_bot().send_message(
                    chat_id=query.from_user.id,
                    text=self.about_text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_about: {e}")
            return
            
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –æ—Ç–∫—Ä—ã–ª '–û –Ω–∞—Å'")
    
    async def handle_main_menu(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
        user = query.from_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.database.add_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        keyboard = [
            [InlineKeyboardButton("ü§ñ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="ai_consultation")],
            [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º", callback_data="real_lawyer")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            if query.message:
                await query.message.reply_text(
                    self.welcome_text,
                    reply_markup=reply_markup
                )
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                await query.get_bot().send_message(
                    chat_id=query.from_user.id,
                    text=self.welcome_text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_main_menu: {e}")
            return
            
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Gemini –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenRouter"""
        user_message = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ email
        if user_id in self.email_waiting_users:
            await self.handle_email_input(update, user_message)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —é—Ä–∏—Å—Ç–æ–º
        if user_id in self.allowed_lawyers:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            await self.handle_lawyer_message(update, user_message)
            return
        

        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω OpenRouter
            if not self.openrouter_api_key:
                logger.error(f"OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await update.message.reply_text(
                    self.error_messages['no_openai']
                )
                return
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini —á–µ—Ä–µ–∑ OpenRouter –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ OpenRouter
            try:
                ai_response = self.get_legal_advice_from_gemini(user_message)
                if ai_response:
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {ai_response[:100]}...")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    ai_response = self.error_messages['processing_error']
            except Exception as gemini_error:
                # –ï—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                logger.error(f"Gemini —á–µ—Ä–µ–∑ OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {gemini_error}")
                ai_response = self.error_messages['processing_error']
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
            keyboard = [
                [InlineKeyboardButton("ü§ñ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="ai_consultation")],
                [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º", callback_data="real_lawyer")],
                [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.database.add_ai_consultation(user_id, user_message, ai_response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
            # –û—Ç–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç Gemini, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–∂–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É
            await update.message.reply_text(ai_response, reply_markup=reply_markup)
            logger.info(f"Gemini —á–µ—Ä–µ–∑ OpenRouter –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Gemini –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenRouter –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            keyboard = [
                [InlineKeyboardButton("ü§ñ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="ai_consultation")],
                [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º", callback_data="real_lawyer")],
                [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                self.error_messages['processing_error'],
                reply_markup=reply_markup
            )
    
    async def handle_email_input(self, update: Update, email: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –¥–ª—è —á–µ–∫–∞"""
        user_id = update.effective_user.id
        consultation_type = self.email_waiting_users.get(user_id, "oral")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        del self.email_waiting_users[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email
        import re
        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        
        if not re.match(email_pattern, email):
            keyboard = [
                [InlineKeyboardButton("üìß –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"enter_email_{consultation_type}")],
                [InlineKeyboardButton("üö´ –ë–µ–∑ —á–µ–∫–∞", callback_data=f"no_receipt_{consultation_type}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email: {email}\n\n"
                f"üí° –ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö email:\n"
                f"‚Ä¢ example@mail.ru\n"
                f"‚Ä¢ user@gmail.com\n"
                f"‚Ä¢ test@yandex.ru\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ —á–µ–∫–∞'",
                reply_markup=reply_markup
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_emails[user_id] = email
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å email
        payment_info = self.payment_handler.create_payment(consultation_type, user_id, email)
        
        if payment_info["success"]:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
                self.database.add_consultation(
                    user_id=user_id,
                    consultation_type=consultation_type,
                    amount=payment_info["amount"],
                    payment_id=payment_info["payment_id"],
                    code_word="–Æ–†–ò–°–¢2024",
                    email=email
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_info["confirmation_url"])],
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_info['payment_id']}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message_text = (
                    f"üí≥ –û–ø–ª–∞—Ç–∞ {payment_info['title']}\n\n"
                    f"üí∞ –°—É–º–º–∞: {payment_info['amount']}‚ÇΩ\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {payment_info['description']}\n"
                    f"üìß Email –¥–ª—è —á–µ–∫–∞: {email}\n\n"
                    f"‚úÖ –ß–µ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email\n\n"
                    f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
                )
                
                await update.message.reply_text(message_text, reply_markup=reply_markup)
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª –ø–ª–∞—Ç–µ–∂ {payment_info['payment_id']} –¥–ª—è {consultation_type} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å email {email}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
                error_message = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                await update.message.reply_text(error_message)
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await update.message.reply_text(error_message)
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payment_info.get('error')}")
    
    async def handle_lawyer_message(self, update: Update, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é—Ä–∏—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤"""
        user_id = update.effective_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é—Ä–∏—Å—Ç–∞ {user_id}: {message_text[:50]}...")
        
        # –ò—â–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        import re
        code_word_match = re.search(r'–Æ–†–ò–°–¢2024', message_text, re.IGNORECASE)
        
        if code_word_match:
            # –ò—â–µ–º Telegram ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            telegram_id_match = re.search(r'(\d{8,})', message_text)
            
            if telegram_id_match:
                client_telegram_id = int(telegram_id_match.group(1))
                await self.verify_code_word_for_lawyer(update, client_telegram_id, "–Æ–†–ò–°–¢2024")
            else:
                await update.message.reply_text(
                    "‚ùå –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω Telegram ID –∫–ª–∏–µ–Ω—Ç–∞.\n"
                    "–ü—Ä–∏–º–µ—Ä: '–ö–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Æ–†–ò–°–¢2024, –µ–≥–æ ID: 123456789'\n\n"
                    "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /check 123456789 –Æ–†–ò–°–¢2024"
                )
        else:
            # –ï—Å–ª–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
            await update.message.reply_text(
                "üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤:\n\n"
                "1. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º\n"
                "2. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "   '–ö–ª–∏–µ–Ω—Ç ID: 123456789, –∫–æ–¥: –Æ–†–ò–°–¢2024'\n"
                "3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "   /check 123456789 –Æ–†–ò–°–¢2024\n\n"
                "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –ø–æ–∫–∞–∂–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ."
            )
    
    async def _handle_lawyer_client_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)"""
        if not self.lawyer_client_enabled:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not event.is_private:
            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ (–Ω–µ –ª–∏—á–Ω–æ–µ): {event.chat_id}")
            return
        
        sender = await event.get_sender()
        message_text = event.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ —é—Ä–∏—Å—Ç–∞
        me = await self.lawyer_client.get_me()
        if sender.id == me.id:
            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é—Ä–∏—Å—Ç–∞")
            return
        
        logger.info(f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender.id} (@{sender.username}): {message_text[:100]}...")
        
        # –ò—â–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ)
        code_match = re.search(r'–Æ–†–ò–°–¢2024', message_text, re.IGNORECASE)
        
        # –ï—Å–ª–∏ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        if not code_match:
            logger.debug(f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {sender.id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ò—â–µ–º Telegram ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ)
        id_match = re.search(r'(\d{8,})', message_text)
        
        if not id_match:
            await event.reply(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Telegram ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            return
        
        client_id = int(id_match.group(1))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
        payment_info = self._check_lawyer_payment(client_id)
        
        if not payment_info:
            await event.reply(
                "‚ùå –í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n\n"
                "–û–ø–ª–∞—Ç–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = self._get_lawyer_user_info(client_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        response = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        response += f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        response += f"–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        

        
        await event.reply(response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        self.lawyer_data["clients"][str(client_id)] = {
            "user_info": user_info,
            "payment_info": payment_info,
            "last_contact": datetime.now().isoformat(),
            "sender_id": sender.id,
            "sender_username": sender.username
        }
        self._save_lawyer_data()
    
    async def _handle_lawyer_client_command(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)"""
        if not self.lawyer_client_enabled:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not event.is_private:
            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞ (–Ω–µ –ª–∏—á–Ω–æ–µ): {event.chat_id}")
            return
        
        sender = await event.get_sender()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ —é—Ä–∏—Å—Ç–∞
        me = await self.lawyer_client.get_me()
        if sender.id == me.id:
            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç —é—Ä–∏—Å—Ç–∞")
            return
        
        command = event.text.lower()
        
        if command == "/start":
            await event.reply(
                "üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à ID –∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Æ–†–ò–°–¢2024.\n"
                "–ü—Ä–∏–º–µ—Ä: 123456789 –Æ–†–ò–°–¢2024\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/help - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            )
        
        elif command == "/help":
            await event.reply(
                "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
                "–ö–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç: ID + –Æ–†–ò–°–¢2024\n"
                "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É\n"
                "–ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ - –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n"
                "–ü—Ä–∏–º–µ—Ä: 123456789 –Æ–†–ò–°–¢2024"
            )
        
        elif command == "/stats":
            if not self.lawyer_data["clients"]:
                await event.reply("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞ - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
                return
            
            stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
            
            for client_id, data in self.lawyer_data["clients"].items():
                user_info = data.get("user_info", {})
                payment_info = data.get("payment_info", {})
                last_contact = data.get("last_contact", "")
                
                stats_text += f"üë§ {user_info.get('first_name', '')} {user_info.get('last_name', '')}\n"
                stats_text += f"üÜî ID: {client_id}\n"
                stats_text += f"üí∞ –û–ø–ª–∞—Ç–∞: {payment_info.get('amount', 0)}‚ÇΩ\n"
                stats_text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {last_contact[:10]}\n\n"
            
            await event.reply(stats_text)
    
    async def _start_lawyer_client(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞"""
        if not self.lawyer_client_enabled or not TELETHON_AVAILABLE:
            logger.info("–ö–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω (LAWYER_CLIENT_ENABLED=false –∏–ª–∏ Telethon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
            return
        
        try:
            session_string = self._load_lawyer_session()
            if not session_string:
                logger.warning("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ —é—Ä–∏—Å—Ç–∞. –ö–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
                logger.info("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ –≤ Telegram –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.lawyer_client = TelegramClient(
                StringSession(session_string),
                self.lawyer_api_id,
                self.lawyer_api_hash
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await self.lawyer_client.connect()
            
            if not await self.lawyer_client.is_user_authorized():
                logger.error("‚ùå –°–µ—Å—Å–∏—è —é—Ä–∏—Å—Ç–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ö–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
                logger.info("üí° –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª veretenov_session.txt –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return
            
            me = await self.lawyer_client.get_me()
            logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.lawyer_client.on(events.NewMessage(pattern=r'^/', func=lambda e: e.is_private))
            async def command_handler(event):
                await self._handle_lawyer_client_command(event)
            
            @self.lawyer_client.on(events.NewMessage(func=lambda e: not e.text.startswith('/') and e.is_private))
            async def message_handler(event):
                await self._handle_lawyer_client_message(event)
            
            logger.info("ü§ñ –ö–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (—Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞: {e}")
            logger.info("üí° –ö–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /check")
    
    async def run_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ —é—Ä–∏—Å—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é Telegram –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logger.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ Telegram...")
        session_ready = await self.session_manager.ensure_session()
        
        if session_ready:
            logger.info("‚úÖ –°–µ—Å—Å–∏—è Telegram –≥–æ—Ç–æ–≤–∞")
        else:
            logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏—è Telegram –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –∫–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        lawyer_task = None
        if self.lawyer_client_enabled:
            lawyer_task = asyncio.create_task(self._start_lawyer_client())
        
        try:
            logger.info("–ó–∞–ø—É—Å–∫ polling...")
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while True:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞
            if lawyer_task:
                lawyer_task.cancel()
                try:
                    await lawyer_task
                except asyncio.CancelledError:
                    pass
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if hasattr(self, 'database'):
                logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
                self.database.close()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)"""
        asyncio.run(self.run_async())

if __name__ == "__main__":
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot = LegalBot()
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫...")
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
