import os
import uuid
from datetime import datetime
from loguru import logger
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from yookassa import Configuration, Payment
from yookassa.domain.request import PaymentRequest


class PaymentHandler:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
        self.shop_id = os.getenv("YOOKASSA_SHOP_ID")
        self.secret_key = os.getenv("YOOKASSA_SECRET_KEY")
        
        if not self.shop_id or not self.secret_key:
            logger.warning("YOOKASSA_SHOP_ID –∏–ª–∏ YOOKASSA_SECRET_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            Configuration.account_id = self.shop_id
            Configuration.secret_key = self.secret_key
            logger.info("–ÆKassa –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¶–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤ —Ä—É–±–ª—è—Ö (—É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ 5%)
        self.oral_consultation_price = 3150.0  # 3000 + 5% = 3150 —Ä—É–±
        self.full_consultation_price = 13650.0  # 13000 + 5% = 13650 —Ä—É–±
    
    def create_payment(self, consultation_type: str = "oral", user_id: int = None, user_email: str = None) -> dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
        
        Args:
            consultation_type: –¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (oral/full)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
        """
        try:
            if not self.shop_id or not self.secret_key:
                logger.error("–ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return {
                    "success": False,
                    "error": "–ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
                }
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {consultation_type} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            if consultation_type == "full":
                amount = self.full_consultation_price
                title = "–ü–æ–ª–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∏–∑—É—á–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                description = "–ü–æ–ª–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∏–∑—É—á–µ–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            else:
                amount = self.oral_consultation_price
                title = "–£—Å—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
                description = "–£—Å—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —é—Ä–∏—Å—Ç–æ–º"
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
            payment_id = str(uuid.uuid4())
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            payment_request = PaymentRequest(
                amount={
                    "value": str(amount),
                    "currency": "RUB"
                },
                confirmation={
                    "type": "redirect",
                    "return_url": "https://t.me/your_bot_username"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
                },
                capture=True,
                description=description,
                receipt={
                    "customer": {
                        "email": user_email or "client@example.com"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
                    },
                    "items": [
                        {
                            "description": title,
                            "quantity": "1",
                            "amount": {
                                "value": str(amount),
                                "currency": "RUB"
                            },
                            "vat_code": "1",  # –ö–æ–¥ –ù–î–° (1 = –±–µ–∑ –ù–î–°)
                            "payment_subject": "service",  # –¢–∏–ø —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏
                            "payment_mode": "full_payment"  # –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞
                        }
                    ]
                },
                metadata={
                    "consultation_type": consultation_type,
                    "user_id": str(user_id) if user_id else "",
                    "payment_id": payment_id
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = Payment.create(payment_request)
            
            logger.info(f"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment.id}")
            
            return {
                "success": True,
                "payment_id": payment.id,
                "confirmation_url": payment.confirmation.confirmation_url,
                "amount": amount,
                "title": title,
                "description": description,
                "consultation_type": consultation_type,
                "status": payment.status
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def check_payment_status(self, payment_id: str) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            if not self.shop_id or not self.secret_key:
                logger.error("–ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return {
                    "success": False,
                    "error": "–ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
                }
            
            payment = Payment.find_one(payment_id)
            
            return {
                "success": True,
                "payment_id": payment.id,
                "status": payment.status,
                "amount": float(payment.amount.value),
                "currency": payment.amount.currency,
                "paid": payment.paid,
                "metadata": payment.metadata
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def get_consultation_price_rub(self, consultation_type: str = "oral") -> float:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö
        
        Args:
            consultation_type: –¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (oral/full)
            
        Returns:
            float: –¶–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö
        """
        if consultation_type == "full":
            return self.full_consultation_price
        else:
            return self.oral_consultation_price
    
    def create_consultation_keyboard(self) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        """
        keyboard = [
            [InlineKeyboardButton("üí¨ –£—Å—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (3150‚ÇΩ)", callback_data="pay_oral_consultation")],
            [InlineKeyboardButton("üìã –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∏–∑—É—á–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (13650‚ÇΩ)", callback_data="pay_full_consultation")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_consultation_message(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        
        Returns:
            str: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        return (
            "üë®‚Äçüíº –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —é—Ä–∏—Å—Ç–æ–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n\n"
            "üí¨ –£—Å—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (3150‚ÇΩ)\n"
            "‚Ä¢ –£—Å—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n"
            "‚Ä¢ –û–±—â–∏–µ –ø—Ä–∞–≤–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n"
            "üìã –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∏–∑—É—á–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (13650‚ÇΩ)\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ü–∏—Å—å–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è\n"
            "‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π"
        )
    
    def is_payment_successful(self, status: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            status: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
        """
        return status == "succeeded"
    
    def get_consultation_price(self) -> float:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        
        Returns:
            float: –¶–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        """
        return 12.5
    
    def create_receipt(self, payment_id: str, user_email: str = None, user_phone: str = None) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ —á–µ—Ä–µ–∑ –ÆKassa
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            user_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            user_phone: –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞
        """
        try:
            if not self.shop_id or not self.secret_key:
                logger.error("–ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞")
                return {
                    "success": False,
                    "error": "–ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            payment = Payment.find_one(payment_id)
            if not payment:
                logger.error(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {
                    "success": False,
                    "error": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
            if payment.status != "succeeded":
                logger.warning(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –æ–ø–ª–∞—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: {payment.status})")
                return {
                    "success": False,
                    "error": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–ø–ª–∞—á–µ–Ω"
                }
            
            # –ß–µ–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å receipt
            logger.info(f"–ß–µ–∫ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id} —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ")
            
            return {
                "success": True,
                "receipt_id": payment_id,
                "status": "succeeded",
                "message": "–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return {
                "success": False,
                "error": str(e)
            } 