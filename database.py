import os
import psycopg2
from psycopg2.extras import RealDictCursor
from loguru import logger
from datetime import datetime
from typing import Optional, Dict, List
import time


class Database:
    def __init__(self):
        self.connection = None
        self.max_retries = 3
        self.retry_delay = 2
        self.connect()
        self.create_tables()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å retry –ª–æ–≥–∏–∫–æ–π"""
        for attempt in range(self.max_retries):
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DATABASE_URL
                database_url = os.getenv('DATABASE_URL')
                if database_url:
                    self.connection = psycopg2.connect(
                        database_url,
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        keepalives_idle=30,
                        keepalives_interval=10,
                        keepalives_count=5,
                        connect_timeout=10
                    )
                else:
                    # –ï—Å–ª–∏ DATABASE_URL –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    self.connection = psycopg2.connect(
                        host=os.getenv('PGHOST'),
                        database=os.getenv('PGDATABASE'),
                        user=os.getenv('PGUSER'),
                        password=os.getenv('PGPASSWORD'),
                        sslmode=os.getenv('PGSSLMODE'),
                        channel_binding=os.getenv('PGCHANNELBINDING'),
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        keepalives_idle=30,
                        keepalives_interval=10,
                        keepalives_count=5,
                        connect_timeout=10
                    )
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt + 1}/{self.max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    self.connection = None
    
    def ensure_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.connection is None or self.connection.closed:
                logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
                self.connect()
                if self.connection and not self.connection.closed:
                    return True
                else:
                    return False
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def execute_with_retry(self, operation, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        for attempt in range(self.max_retries):
            try:
                if not self.ensure_connection():
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
                
                return operation(*args, **kwargs)
                
            except (psycopg2.OperationalError, psycopg2.InterfaceError) as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {e}")
                if attempt < self.max_retries - 1:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    if self.connection:
                        try:
                            self.connection.close()
                        except:
                            pass
                    self.connection = None
                    time.sleep(self.retry_delay)
                else:
                    logger.error(f"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    raise
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
                raise
    
    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        if not self.ensure_connection():
            return
        
        try:
            cursor = self.connection.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    username VARCHAR(255),
                    first_name VARCHAR(255),
                    last_name VARCHAR(255),
                    phone VARCHAR(20),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS consultations (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    consultation_type VARCHAR(50) NOT NULL,
                    amount DECIMAL(10,2) NOT NULL,
                    payment_id VARCHAR(255),
                    payment_status VARCHAR(50) DEFAULT 'pending',
                    code_word VARCHAR(50) DEFAULT '–Æ–†–ò–°–¢2024',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(telegram_id)
                )
            """)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ code_word, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            cursor.execute("""
                ALTER TABLE consultations 
                ADD COLUMN IF NOT EXISTS code_word VARCHAR(50) DEFAULT '–Æ–†–ò–°–¢2024'
            """)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ email, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            cursor.execute("""
                ALTER TABLE consultations 
                ADD COLUMN IF NOT EXISTS email VARCHAR(255)
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS ai_consultations (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    question TEXT NOT NULL,
                    answer TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(telegram_id)
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS ai_subscriptions (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    subscription_type VARCHAR(50) NOT NULL,
                    consultations_count INT NOT NULL,
                    amount DECIMAL(10,2) NOT NULL,
                    payment_id VARCHAR(255),
                    payment_status VARCHAR(50) DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(telegram_id)
                )
            """)
            
            self.connection.commit()
            cursor.close()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def add_user(self, telegram_id: int, username: Optional[str] = None, 
                 first_name: Optional[str] = None, last_name: Optional[str] = None,
                 phone: Optional[str] = None) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            last_name: –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        def _add_user_operation():
            cursor = self.connection.cursor()
            
            cursor.execute("""
                INSERT INTO users (telegram_id, username, first_name, last_name, phone, updated_at)
                VALUES (%s, %s, %s, %s, %s, CURRENT_TIMESTAMP)
                ON CONFLICT (telegram_id) 
                DO UPDATE SET 
                    username = EXCLUDED.username,
                    first_name = EXCLUDED.first_name,
                    last_name = EXCLUDED.last_name,
                    phone = EXCLUDED.phone,
                    updated_at = CURRENT_TIMESTAMP
            """, (telegram_id, username, first_name, last_name, phone))
            
            self.connection.commit()
            cursor.close()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
        
        try:
            return self.execute_with_retry(_add_user_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return False
    
    def add_consultation(self, user_id: int, consultation_type: str, 
                        amount: float, payment_id: Optional[str] = None, 
                        code_word: str = "–Æ–†–ò–°–¢2024", email: Optional[str] = None) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            consultation_type: –¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        def _add_consultation_operation():
            cursor = self.connection.cursor()
            
            cursor.execute("""
                INSERT INTO consultations (user_id, consultation_type, amount, payment_id, payment_status, code_word, email)
                VALUES (%s, %s, %s, %s, 'completed', %s, %s)
            """, (user_id, consultation_type, amount, payment_id, code_word, email))
            
            self.connection.commit()
            cursor.close()
            logger.info(f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        
        try:
            return self.execute_with_retry(_add_consultation_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è {user_id}: {e}")
            return False
    
    def get_user_info(self, telegram_id: int) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ None
        """
        def _get_user_operation():
            cursor = self.connection.cursor(cursor_factory=RealDictCursor)
            
            cursor.execute("""
                SELECT * FROM users WHERE telegram_id = %s
            """, (telegram_id,))
            
            user = cursor.fetchone()
            cursor.close()
            
            return dict(user) if user else None
        
        try:
            return self.execute_with_retry(_get_user_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {telegram_id}: {e}")
            return None
    
    def get_last_consultation(self, telegram_id: int) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–ª–∏ None
        """
        def _get_consultation_operation():
            cursor = self.connection.cursor(cursor_factory=RealDictCursor)
            
            cursor.execute("""
                SELECT c.*, u.username, u.phone
                FROM consultations c
                JOIN users u ON c.user_id = u.telegram_id
                WHERE c.user_id = %s
                ORDER BY c.created_at DESC
                LIMIT 1
            """, (telegram_id,))
            
            consultation = cursor.fetchone()
            cursor.close()
            
            return dict(consultation) if consultation else None
        
        try:
            return self.execute_with_retry(_get_consultation_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è {telegram_id}: {e}")
            return None
    
    def verify_code_word(self, telegram_id: int, code_word: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            code_word: –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤–µ—Ä–Ω–æ–µ
        """
        def _verify_operation():
            cursor = self.connection.cursor()
            
            cursor.execute("""
                SELECT COUNT(*) FROM consultations 
                WHERE user_id = %s AND code_word = %s AND payment_status = 'completed'
                ORDER BY created_at DESC
                LIMIT 1
            """, (telegram_id, code_word))
            
            count = cursor.fetchone()[0]
            cursor.close()
            
            return count > 0
        
        try:
            return self.execute_with_retry(_verify_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è {telegram_id}: {e}")
            return False
    
    def get_consultation_by_code_word(self, telegram_id: int, code_word: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∫–æ–¥–æ–≤–æ–º—É —Å–ª–æ–≤—É
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            code_word: –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–ª–∏ None
        """
        def _get_consultation_operation():
            cursor = self.connection.cursor(cursor_factory=RealDictCursor)
            
            cursor.execute("""
                SELECT c.*, u.username, u.first_name, u.last_name, u.phone
                FROM consultations c
                JOIN users u ON c.user_id = u.telegram_id
                WHERE c.user_id = %s AND c.code_word = %s
                ORDER BY c.created_at DESC
                LIMIT 1
            """, (telegram_id, code_word))
            
            consultation = cursor.fetchone()
            cursor.close()
            
            return dict(consultation) if consultation else None
        
        try:
            return self.execute_with_retry(_get_consultation_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∫–æ–¥–æ–≤–æ–º—É —Å–ª–æ–≤—É –¥–ª—è {telegram_id}: {e}")
            return None
    
    def get_consultation_email(self, payment_id: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ email –∏–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            str: Email –∏–ª–∏ None
        """
        def _get_email_operation():
            cursor = self.connection.cursor()
            
            cursor.execute("""
                SELECT email FROM consultations 
                WHERE payment_id = %s 
                ORDER BY created_at DESC 
                LIMIT 1
            """, (payment_id,))
            
            result = cursor.fetchone()
            cursor.close()
            
            return result[0] if result else None
        
        try:
            return self.execute_with_retry(_get_email_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return None
    
    def get_user_statistics(self, telegram_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        def _get_stats_operation():
            cursor = self.connection.cursor(cursor_factory=RealDictCursor)
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            cursor.execute("""
                SELECT COUNT(*) as total_consultations,
                       SUM(amount) as total_amount
                FROM consultations 
                WHERE user_id = %s
            """, (telegram_id,))
            
            stats = cursor.fetchone()
            cursor.close()
            
            return {
                'total_consultations': stats['total_consultations'] if stats else 0,
                'total_amount': float(stats['total_amount']) if stats and stats['total_amount'] else 0.0
            }
        
        try:
            return self.execute_with_retry(_get_stats_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {telegram_id}: {e}")
            return {}
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    def add_ai_consultation(self, user_id: int, question: str, answer: str = None) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            answer: –û—Ç–≤–µ—Ç –ò–ò
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        def _add_ai_consultation_operation():
            cursor = self.connection.cursor()
            cursor.execute("""
                INSERT INTO ai_consultations (user_id, question, answer)
                VALUES (%s, %s, %s)
            """, (user_id, question, answer))
            
            self.connection.commit()
            cursor.close()
            return True
        
        try:
            return self.execute_with_retry(_add_ai_consultation_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è {user_id}: {e}")
            return False
    
    def get_ai_consultations_count(self, user_id: int) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        """
        def _get_count_operation():
            cursor = self.connection.cursor()
            cursor.execute("""
                SELECT COUNT(*) FROM ai_consultations 
                WHERE user_id = %s
            """, (user_id,))
            
            count = cursor.fetchone()[0]
            cursor.close()
            return count
        
        try:
            return self.execute_with_retry(_get_count_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è {user_id}: {e}")
            return 0
    
    def get_ai_subscription_consultations(self, user_id: int) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        """
        def _get_subscription_operation():
            cursor = self.connection.cursor()
            cursor.execute("""
                SELECT SUM(consultations_count) FROM ai_subscriptions 
                WHERE user_id = %s AND payment_status = 'completed'
            """, (user_id,))
            
            result = cursor.fetchone()[0]
            cursor.close()
            return int(result) if result else 0
        
        try:
            return self.execute_with_retry(_get_subscription_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è {user_id}: {e}")
            return 0
    
    def get_used_subscription_consultations(self, user_id: int) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        """
        def _get_used_operation():
            cursor = self.connection.cursor()
            cursor.execute("""
                SELECT COUNT(*) FROM ai_consultations 
                WHERE user_id = %s AND id > (
                    SELECT COALESCE(MAX(id), 0) FROM ai_consultations 
                    WHERE user_id = %s AND id <= (
                        SELECT COALESCE(MAX(id), 0) FROM ai_consultations 
                        WHERE user_id = %s 
                        ORDER BY created_at 
                        LIMIT 5
                    )
                )
            """, (user_id, user_id, user_id))
            
            result = cursor.fetchone()[0]
            cursor.close()
            return int(result) if result else 0
        
        try:
            return self.execute_with_retry(_get_used_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è {user_id}: {e}")
            return 0
    
    def add_ai_subscription(self, user_id: int, subscription_type: str, 
                          consultations_count: int, amount: float, 
                          payment_id: str = None) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription_type: –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
            consultations_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            amount: –°—É–º–º–∞
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        def _add_subscription_operation():
            cursor = self.connection.cursor()
            cursor.execute("""
                INSERT INTO ai_subscriptions (user_id, subscription_type, consultations_count, amount, payment_id, payment_status)
                VALUES (%s, %s, %s, %s, %s, 'completed')
            """, (user_id, subscription_type, consultations_count, amount, payment_id))
            
            self.connection.commit()
            cursor.close()
            return True
        
        try:
            return self.execute_with_retry(_add_subscription_operation)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ò–ò –¥–ª—è {user_id}: {e}")
            return False
    
    def can_user_use_ai(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–≤—Å–µ–≥–¥–∞ True –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        """
        return True
    
    def get_remaining_ai_consultations(self, user_id: int) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π (–±–µ–∑–ª–∏–º–∏—Ç = -1)
        """
        return -1  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç 